{
  "common": {
    "or":"or",
    "yes": "Yes",
    "no": "No",
    "type": "Type"
  },
  "install": {
    "title": "Scaffolding tool",
    "subtitle": "An scaffolding tool called al-cli is provided to help developers to generate boilerplate codes and sample projects. Along with it, a simple design pattern lyt/view/comp is also recommended. But developers are not required to follow it to utilized the templates.",
    "install": {
      "title": "Installation",
      "step1": "Initially, install the scaffolding tool globally",
      "step2": "Once installed, run",
      "step3": "will dump the help info into the console"
    }
  },
  "genrPrj": {
    "title": "Generate sample projects",
    "reactTs": {
      "title": "Typescript template project based on create-react-app",
      "subtitle": "To generate the sample project, change directory into your Workspace folder like /home/User/Workspaces",
      "step1":"Generate project with node_modules",
      "step1B":"Generate but skip installing node_modules",
      "step2":"Once done, one sample typescript template project will be created like this:",
      "step3":"Redirect to the project directory and, make no mistake, you could start the sample project."
    },
    "openfinReactTs": {
      "title": "Openfin react TS template project",
      "subtitle": "To generate the openfin sample project, change directory into your Workspace folder like /home/User/Workspaces",
      "step1":"Generate project with node_modules",
      "step1B":"Generate but skip to install  node_modules",
      "step2": "Redirect to the project folder and, make no mistake, you could start the sample project."
    }
  },
  "standalonePkg": {
    "title": "Standalone binary packaging",
    "build": {
      "title": "Build",
      "step1": "Before packaging, the static files should be built in advance, change directory into your project folder.",
      "step2": "Once done, you should got the summary of all the files built."
    },
    "pkg": {
      "title": "Package",
      "step1": "Once static files built, we could generate packaged binary via",
      "step2": "Output directory: package",
      "step3": "Make no mistake, a package folder will be created containing the binary depending on the platform you built.",
      "step4": "To execute the binary, just execute openfin_starter at the package folder."
    }
  },
  "genrTpl": {
    "title": "Generate templates",
    "diff": {
      "title": "Diff between Layout, View and Component",
      "subtitle": "The scaffolding tool support to generate three types of templates: Component, View and Layout",
      "desc": "All three templates are react component. Generally speaking, both lyt and view connects to redux. But lyt can act as the entry comp and view is the reusable unit inside lyt. View comp's outermost container should be set to use up all the space. Comps are reusable non-redux-connected units among view or lyt.",
      "table": {
        "col1": "Connected to Redux",
        "col2": "Entry components",
        "col3": "Reusable components",
        "row1": "Component template (comp)",
        "row2": "View template (view)",
        "row3": "Layout template (lyt)"
      }
    },
    "comp": {},
    "view": {},
    "lyt": {}
  }

}